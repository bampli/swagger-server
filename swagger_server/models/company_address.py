# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class CompanyAddress(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, street: str=None, street2: str=None, city: str=None, zipcode: str=None, tax_id: str=None):  # noqa: E501
        """CompanyAddress - a model defined in Swagger

        :param street: The street of this CompanyAddress.  # noqa: E501
        :type street: str
        :param street2: The street2 of this CompanyAddress.  # noqa: E501
        :type street2: str
        :param city: The city of this CompanyAddress.  # noqa: E501
        :type city: str
        :param zipcode: The zipcode of this CompanyAddress.  # noqa: E501
        :type zipcode: str
        :param tax_id: The tax_id of this CompanyAddress.  # noqa: E501
        :type tax_id: str
        """
        self.swagger_types = {
            'street': str,
            'street2': str,
            'city': str,
            'zipcode': str,
            'tax_id': str
        }

        self.attribute_map = {
            'street': 'street',
            'street2': 'street2',
            'city': 'city',
            'zipcode': 'zipcode',
            'tax_id': 'taxId'
        }
        self._street = street
        self._street2 = street2
        self._city = city
        self._zipcode = zipcode
        self._tax_id = tax_id

    @classmethod
    def from_dict(cls, dikt) -> 'CompanyAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Company_address of this CompanyAddress.  # noqa: E501
        :rtype: CompanyAddress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def street(self) -> str:
        """Gets the street of this CompanyAddress.


        :return: The street of this CompanyAddress.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street: str):
        """Sets the street of this CompanyAddress.


        :param street: The street of this CompanyAddress.
        :type street: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def street2(self) -> str:
        """Gets the street2 of this CompanyAddress.


        :return: The street2 of this CompanyAddress.
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2: str):
        """Sets the street2 of this CompanyAddress.


        :param street2: The street2 of this CompanyAddress.
        :type street2: str
        """

        self._street2 = street2

    @property
    def city(self) -> str:
        """Gets the city of this CompanyAddress.


        :return: The city of this CompanyAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this CompanyAddress.


        :param city: The city of this CompanyAddress.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def zipcode(self) -> str:
        """Gets the zipcode of this CompanyAddress.


        :return: The zipcode of this CompanyAddress.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode: str):
        """Sets the zipcode of this CompanyAddress.


        :param zipcode: The zipcode of this CompanyAddress.
        :type zipcode: str
        """
        if zipcode is None:
            raise ValueError("Invalid value for `zipcode`, must not be `None`")  # noqa: E501

        self._zipcode = zipcode

    @property
    def tax_id(self) -> str:
        """Gets the tax_id of this CompanyAddress.


        :return: The tax_id of this CompanyAddress.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id: str):
        """Sets the tax_id of this CompanyAddress.


        :param tax_id: The tax_id of this CompanyAddress.
        :type tax_id: str
        """
        if tax_id is None:
            raise ValueError("Invalid value for `tax_id`, must not be `None`")  # noqa: E501

        self._tax_id = tax_id
