# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Stage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, stage_id: str=None, name: str=None, active: bool=True, cyclo_id: str=None):  # noqa: E501
        """Stage - a model defined in Swagger

        :param stage_id: The stage_id of this Stage.  # noqa: E501
        :type stage_id: str
        :param name: The name of this Stage.  # noqa: E501
        :type name: str
        :param active: The active of this Stage.  # noqa: E501
        :type active: bool
        :param cyclo_id: The cyclo_id of this Stage.  # noqa: E501
        :type cyclo_id: str
        """
        self.swagger_types = {
            'stage_id': str,
            'name': str,
            'active': bool,
            'cyclo_id': str
        }

        self.attribute_map = {
            'stage_id': 'stage_id',
            'name': 'name',
            'active': 'active',
            'cyclo_id': 'cyclo_id'
        }
        self._stage_id = stage_id
        self._name = name
        self._active = active
        self._cyclo_id = cyclo_id

    @classmethod
    def from_dict(cls, dikt) -> 'Stage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Stage of this Stage.  # noqa: E501
        :rtype: Stage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stage_id(self) -> str:
        """Gets the stage_id of this Stage.

        Auto-generated primary key field  # noqa: E501

        :return: The stage_id of this Stage.
        :rtype: str
        """
        return self._stage_id

    @stage_id.setter
    def stage_id(self, stage_id: str):
        """Sets the stage_id of this Stage.

        Auto-generated primary key field  # noqa: E501

        :param stage_id: The stage_id of this Stage.
        :type stage_id: str
        """
        if stage_id is None:
            raise ValueError("Invalid value for `stage_id`, must not be `None`")  # noqa: E501

        self._stage_id = stage_id

    @property
    def name(self) -> str:
        """Gets the name of this Stage.


        :return: The name of this Stage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Stage.


        :param name: The name of this Stage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def active(self) -> bool:
        """Gets the active of this Stage.


        :return: The active of this Stage.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Stage.


        :param active: The active of this Stage.
        :type active: bool
        """

        self._active = active

    @property
    def cyclo_id(self) -> str:
        """Gets the cyclo_id of this Stage.

        This property is a reference to a Cyclo  # noqa: E501

        :return: The cyclo_id of this Stage.
        :rtype: str
        """
        return self._cyclo_id

    @cyclo_id.setter
    def cyclo_id(self, cyclo_id: str):
        """Sets the cyclo_id of this Stage.

        This property is a reference to a Cyclo  # noqa: E501

        :param cyclo_id: The cyclo_id of this Stage.
        :type cyclo_id: str
        """
        if cyclo_id is None:
            raise ValueError("Invalid value for `cyclo_id`, must not be `None`")  # noqa: E501

        self._cyclo_id = cyclo_id
