# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Company(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, company_id: str=None, name: str=None):  # noqa: E501
        """Company - a model defined in Swagger

        :param company_id: The company_id of this Company.  # noqa: E501
        :type company_id: str
        :param name: The name of this Company.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'company_id': str,
            'name': str
        }

        self.attribute_map = {
            'company_id': 'company_id',
            'name': 'name'
        }
        self._company_id = company_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Company':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Company of this Company.  # noqa: E501
        :rtype: Company
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self) -> str:
        """Gets the company_id of this Company.

        Auto-generated primary key field  # noqa: E501

        :return: The company_id of this Company.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id: str):
        """Sets the company_id of this Company.

        Auto-generated primary key field  # noqa: E501

        :param company_id: The company_id of this Company.
        :type company_id: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def name(self) -> str:
        """Gets the name of this Company.


        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Company.


        :param name: The name of this Company.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
