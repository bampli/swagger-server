# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Contact(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, contact_id: str=None, first_name: str=None, last_name: str=None, tax_id: str=None, birthday: int=None, active: bool=True, company_id: str=None):  # noqa: E501
        """Contact - a model defined in Swagger

        :param contact_id: The contact_id of this Contact.  # noqa: E501
        :type contact_id: str
        :param first_name: The first_name of this Contact.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this Contact.  # noqa: E501
        :type last_name: str
        :param tax_id: The tax_id of this Contact.  # noqa: E501
        :type tax_id: str
        :param birthday: The birthday of this Contact.  # noqa: E501
        :type birthday: int
        :param active: The active of this Contact.  # noqa: E501
        :type active: bool
        :param company_id: The company_id of this Contact.  # noqa: E501
        :type company_id: str
        """
        self.swagger_types = {
            'contact_id': str,
            'first_name': str,
            'last_name': str,
            'tax_id': str,
            'birthday': int,
            'active': bool,
            'company_id': str
        }

        self.attribute_map = {
            'contact_id': 'contact_id',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'tax_id': 'taxId',
            'birthday': 'birthday',
            'active': 'active',
            'company_id': 'company_id'
        }
        self._contact_id = contact_id
        self._first_name = first_name
        self._last_name = last_name
        self._tax_id = tax_id
        self._birthday = birthday
        self._active = active
        self._company_id = company_id

    @classmethod
    def from_dict(cls, dikt) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Contact of this Contact.  # noqa: E501
        :rtype: Contact
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self) -> str:
        """Gets the contact_id of this Contact.

        Auto-generated primary key field  # noqa: E501

        :return: The contact_id of this Contact.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id: str):
        """Sets the contact_id of this Contact.

        Auto-generated primary key field  # noqa: E501

        :param contact_id: The contact_id of this Contact.
        :type contact_id: str
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")  # noqa: E501

        self._contact_id = contact_id

    @property
    def first_name(self) -> str:
        """Gets the first_name of this Contact.


        :return: The first_name of this Contact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this Contact.


        :param first_name: The first_name of this Contact.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this Contact.


        :return: The last_name of this Contact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this Contact.


        :param last_name: The last_name of this Contact.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def tax_id(self) -> str:
        """Gets the tax_id of this Contact.


        :return: The tax_id of this Contact.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id: str):
        """Sets the tax_id of this Contact.


        :param tax_id: The tax_id of this Contact.
        :type tax_id: str
        """

        self._tax_id = tax_id

    @property
    def birthday(self) -> int:
        """Gets the birthday of this Contact.

        Birthday as unix timestamp (in ms)  # noqa: E501

        :return: The birthday of this Contact.
        :rtype: int
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday: int):
        """Sets the birthday of this Contact.

        Birthday as unix timestamp (in ms)  # noqa: E501

        :param birthday: The birthday of this Contact.
        :type birthday: int
        """

        self._birthday = birthday

    @property
    def active(self) -> bool:
        """Gets the active of this Contact.


        :return: The active of this Contact.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Contact.


        :param active: The active of this Contact.
        :type active: bool
        """

        self._active = active

    @property
    def company_id(self) -> str:
        """Gets the company_id of this Contact.

        This property is a reference to a Company  # noqa: E501

        :return: The company_id of this Contact.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id: str):
        """Sets the company_id of this Contact.

        This property is a reference to a Company  # noqa: E501

        :param company_id: The company_id of this Contact.
        :type company_id: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id
