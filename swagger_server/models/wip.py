# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Wip(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, wip_id: str=None, name: str=None, active: bool=True, facility_id: str=None):  # noqa: E501
        """Wip - a model defined in Swagger

        :param wip_id: The wip_id of this Wip.  # noqa: E501
        :type wip_id: str
        :param name: The name of this Wip.  # noqa: E501
        :type name: str
        :param active: The active of this Wip.  # noqa: E501
        :type active: bool
        :param facility_id: The facility_id of this Wip.  # noqa: E501
        :type facility_id: str
        """
        self.swagger_types = {
            'wip_id': str,
            'name': str,
            'active': bool,
            'facility_id': str
        }

        self.attribute_map = {
            'wip_id': 'wip_id',
            'name': 'name',
            'active': 'active',
            'facility_id': 'facility_id'
        }
        self._wip_id = wip_id
        self._name = name
        self._active = active
        self._facility_id = facility_id

    @classmethod
    def from_dict(cls, dikt) -> 'Wip':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Wip of this Wip.  # noqa: E501
        :rtype: Wip
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wip_id(self) -> str:
        """Gets the wip_id of this Wip.

        Auto-generated primary key field  # noqa: E501

        :return: The wip_id of this Wip.
        :rtype: str
        """
        return self._wip_id

    @wip_id.setter
    def wip_id(self, wip_id: str):
        """Sets the wip_id of this Wip.

        Auto-generated primary key field  # noqa: E501

        :param wip_id: The wip_id of this Wip.
        :type wip_id: str
        """
        if wip_id is None:
            raise ValueError("Invalid value for `wip_id`, must not be `None`")  # noqa: E501

        self._wip_id = wip_id

    @property
    def name(self) -> str:
        """Gets the name of this Wip.


        :return: The name of this Wip.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Wip.


        :param name: The name of this Wip.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def active(self) -> bool:
        """Gets the active of this Wip.


        :return: The active of this Wip.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Wip.


        :param active: The active of this Wip.
        :type active: bool
        """

        self._active = active

    @property
    def facility_id(self) -> str:
        """Gets the facility_id of this Wip.

        This property is a reference to a Facility  # noqa: E501

        :return: The facility_id of this Wip.
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id: str):
        """Sets the facility_id of this Wip.

        This property is a reference to a Facility  # noqa: E501

        :param facility_id: The facility_id of this Wip.
        :type facility_id: str
        """
        if facility_id is None:
            raise ValueError("Invalid value for `facility_id`, must not be `None`")  # noqa: E501

        self._facility_id = facility_id
